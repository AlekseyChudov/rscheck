#!/usr/bin/env python2.7

import argparse
import collections
import logging
import os
import re
import socket
import ssl
import threading
import time
import urllib2
import urlparse

from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from contextlib import closing
from socket import AF_INET, SOCK_DGRAM, SOCK_STREAM
from SocketServer import ThreadingMixIn

import dns.resolver
import pyroute2.iproute
import systemd.daemon
import yaml

from pyroute2.netlink.rtnl.ifinfmsg import IFF_UP, IFF_RUNNING

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '14 May 2018'
__version__ = '1.0.8'


class CheckError(Exception):
    pass


class AbstractCheck(threading.Thread):
    def __init__(self, name, interval=3, timeout=1,
                 error_message=True, status_message=False):
        super(AbstractCheck, self).__init__(name=name)
        self.__status = Report.check_status(name)
        self.daemon = True
        self.interval = interval
        self.timeout = timeout
        self.error_message = error_message
        self.status_message = status_message

    def run(self):
        while self.is_alive():
            error = Status.OK
            message = ''

            try:
                result = self.check_status()
                if self.status_message and result:
                    message = str(result)

            except Exception as e:
                error = Status.ERROR
                logging.error('{}: {}'.format(e.__class__.__name__, e))
                if self.error_message:
                    message = '{} error: {}'.format(self.name, e)

            self.__status.update(error, message)
            logging.debug(self.__status)
            time.sleep(self.interval)

    def check_status(self):
        raise NotImplementedError


class CheckDefaultRoutes(AbstractCheck):
    def check_status(self):
        with pyroute2.iproute.IPRoute() as ip:
            ip.get_timeout = self.timeout
            default_routes = ip.get_default_routes()

        if not default_routes:
            raise CheckError('no default route')

        if self.status_message:
            return ','.join(dict(route['attrs'])['RTA_GATEWAY']
                            for route in default_routes)


class CheckDNS(AbstractCheck):
    def __init__(self, host, qname, qtype='A', port=53, tcp=False, **kwargs):
        super(CheckDNS, self).__init__(**kwargs)
        self.resolver = dns.resolver.Resolver(configure=False)
        self.resolver.nameservers.append(host)
        self.resolver.port = port
        self.resolver.lifetime = self.timeout
        self.qname = qname
        self.qtype = qtype
        self.tcp = tcp

    def check_status(self):
        try:
            answer = self.resolver.query(self.qname, self.qtype, tcp=self.tcp)
            if self.status_message:
                return ','.join(str(rrset) for rrset in answer.rrset)

        except dns.exception.DNSException as e:
            raise CheckError('DNS query "{} {}" to {}:{} failed: {}'.format(
                self.qname, self.qtype, self.resolver.nameservers[0],
                self.resolver.port, e))


class CheckInterfaces(AbstractCheck):
    def __init__(self, interfaces, **kwargs):
        super(CheckInterfaces, self).__init__(**kwargs)
        self.interfaces = interfaces

    @staticmethod
    def interfaces_info(timeout):
        if_names = {}
        if_indices = {}

        with pyroute2.iproute.IPRoute() as ip:
            ip.get_timeout = timeout

            for msg in ip.link('dump'):
                index = msg['index']
                flags = msg['flags']
                name = msg.get_attr('IFLA_IFNAME')
                if_names[name] = {'index': index, 'flags': flags, 'address': []}
                if_indices[index] = if_names[name]

            for msg in ip.get_addr():
                index = msg['index']
                address = msg.get_attr('IFA_ADDRESS')
                if_indices[index]['address'].append(address)

        return if_names

    def check_status(self):
        interfaces_info = self.interfaces_info(self.timeout)
        for name in self.interfaces:
            if name not in interfaces_info:
                raise CheckError('interface "{}" does not exist'.format(name))

            elif not interfaces_info[name]['flags'] & (IFF_UP | IFF_RUNNING):
                raise CheckError('interface "{}" is not UP'.format(name))

            elif not interfaces_info[name]['address']:
                raise CheckError('interface "{}" address not set'.format(name))


class CheckSysctl(AbstractCheck):
    def __init__(self, variables, **kwargs):
        super(CheckSysctl, self).__init__(**kwargs)
        self.variables = variables

    @staticmethod
    def sysctl_read(variable):
        sysctl_path = '/proc/sys/' + '/'.join(variable.split('.'))
        sysctl_value = ''
        try:
            with open(sysctl_path) as sysctl_file:
                sysctl_value = sysctl_file.read().strip()
        except IOError as e:
            logging.error('error reading {}: {}'.format(variable, e))

        return sysctl_value

    def check_status(self):
        for variable, value in self.variables.items():
            sysctl_value = self.sysctl_read(variable)
            if sysctl_value != str(value):
                raise CheckError('{} value is "{}" not "{}"'.format(
                    variable, sysctl_value, value))


class CheckTCP(AbstractCheck):
    def __init__(self, host, port, use_ssl=False, **kwargs):
        super(CheckTCP, self).__init__(**kwargs)
        self.host = host
        self.port = port
        self.use_ssl = use_ssl

    def check_status(self):
        try:
            with closing(socket.socket(AF_INET, SOCK_STREAM)) as sock:
                sock.settimeout(self.timeout)
                if self.use_ssl:
                    with closing(ssl.wrap_socket(sock)) as ssl_sock:
                        ssl_sock.connect((self.host, self.port))
                else:
                    sock.connect((self.host, self.port))

        except socket.error as e:
            raise CheckError('connection to {}:{} failed: {}'.format(
                self.host, self.port, e))


class CheckUDPRequest(AbstractCheck):
    def __init__(self, host, port, request, response,
                 max_response_size=1024, **kwargs):
        super(CheckUDPRequest, self).__init__(**kwargs)
        self.host = host
        self.port = port
        self.request = request
        self.response = response
        self.max_response_size = max_response_size

    def check_status(self):
        try:
            with closing(socket.socket(AF_INET, SOCK_DGRAM)) as sock:
                sock.settimeout(self.timeout)
                sock.connect((self.host, self.port))
                sock.send(self.request)
                response = sock.recv(self.max_response_size).rstrip()
                if re.match(self.response, response):
                    if self.status_message:
                        return response
                else:
                    raise CheckError('{}:{} response is "{}" not "{}"'.format(
                        self.host, self.port, response, self.response))

        except socket.error as e:
            raise CheckError('request to {}:{} failed: {}'.format(
                self.host, self.port, e))


class CheckURL(AbstractCheck):
    def __init__(self, url, response, **kwargs):
        super(CheckURL, self).__init__(**kwargs)
        self.url = url
        self.response = response

    def check_status(self):
        try:
            r = urllib2.urlopen(self.url, timeout=self.timeout)
            response = r.read().strip()
            if re.match(self.response, response):
                if self.status_message:
                    return response
            else:
                raise CheckError('{} response is "{}" not "{}"'.format(
                    self.url, response, self.response))

        except (socket.error, urllib2.URLError) as e:
            raise CheckError('{} {}'.format(self.url, e))


class CheckQuery(object):
    def __init__(self, checks, query, config):
        self.__status = Report.query_status(query)
        self.checks = checks
        self.query = query
        self.config = config

    def check_virtual_interface(self):
        name = self.checks.get('virtual_if')
        addresses = self.checks.get('virtual_ip')

        if not name and addresses or name and not addresses:
            raise CheckError(
                'both "virtual_if" and "virtual_ip" parameters required')

        interfaces_info = CheckInterfaces.interfaces_info(
            self.config.query_timeout)

        if name not in interfaces_info:
            raise CheckError('interface "{}" does not exist'.format(name))

        elif not interfaces_info[name]['flags'] & (IFF_UP | IFF_RUNNING):
            raise CheckError('interface "{}" is not UP'.format(name))

        elif (CheckSysctl.sysctl_read(
                'net.ipv4.conf.{}.rp_filter'.format(name)) != '0'):
            raise CheckError(
                'interface "{}" rp_filter not disabled'.format(name))

        else:
            for address in addresses.split(','):
                if address not in interfaces_info[name]['address']:
                    raise CheckError(
                        'interface "{}" address "{}" not set'.format(
                            name, address))

    def query_status(self):
        for check in self.checks:
            if check in ('exclude', 'virtual_ip'):
                continue

            if check == 'virtual_if':
                self.check_virtual_interface()
            else:
                raise CheckError('invalid check "{}"'.format(check))

    def update_status(self):
        if not self.__status.is_expired(self.config.query_cache_ttl):
            logging.debug('cached {}'.format(self.__status))
            return

        error = Status.OK
        message = ''

        try:
            self.query_status()
        except Exception as e:
            error = Status.ERROR
            logging.error('{}: {}'.format(e.__class__.__name__, e))
            if self.config.error_message:
                message = 'query error: {}'.format(e)

        self.__status.update(error, message)
        logging.debug('updated {}'.format(self.__status))


class HTTPRequestHandler(BaseHTTPRequestHandler, object):
    error_message_format = '%(message)s'
    protocol_version = 'HTTP/1.1'
    server_version = 'RSCheck/' + __version__
    rbufsize = -1
    wbufsize = -1

    def __init__(self, *args):
        self.location = None
        self.query = None
        self.checks = {}
        super(HTTPRequestHandler, self).__init__(*args)

    def do_GET(self):
        self.handle_request()

    def do_HEAD(self):
        self.handle_request()

    def handle_request(self):
        self.location, self.query = urlparse.urlsplit(self.path)[2:4]

        if self.location != self.server.config.location:
            message = 'invalid location "{}"'.format(self.location)
            logging.error(message)
            self.send_error(404, message)

        elif self.query and not self.check_query():
            message = 'invalid query "{}"'.format(self.query)
            logging.error(message)
            self.send_error(400, message)

        elif self.command == 'GET':
            message = Report.message(self.query, self.checks_exclude())
            logging.debug('message="{}"'.format(message))
            self.send_message(200, message)

        elif self.command == 'HEAD':
            if Report.is_ok(self.query, self.checks_exclude()):
                self.send_message(200)
            else:
                self.send_message(503)

    def send_message(self, code, message=''):
        self.send_response(code)

        if message:
            self.send_header('Content-Type', 'text/html; charset=utf-8')

        if self.server.config.keep_alive:
            self.send_header('Content-Length', len(message))
        else:
            self.send_header('Connection', 'close')

        self.end_headers()

        if message:
            self.wfile.write(message)

    def checks_exclude(self, key='exclude'):
        return self.checks[key].split(',') if key in self.checks else ()

    def check_query(self):
        for check in urlparse.unquote(self.query).split('&'):
            check_args = check.split('=')
            if len(check_args) != 2:
                return False

            self.checks[check_args[0]] = check_args[1]

        CheckQuery(self.checks, self.query, self.server.config).update_status()

        return True


class Config(argparse.Namespace):
    def __getattr__(self, name):
        return self.__dict__[name]


class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    pass


class HTTPServerThread(threading.Thread):
    def __init__(self, name, address, port, location, keep_alive=True,
                 request_timeout=3, query_cache_ttl=5, query_timeout=1,
                 wait_status_interval=3, wait_status_timeout=0,
                 error_message=True):
        super(HTTPServerThread, self).__init__(name=name)
        self.daemon = True
        self.address = address
        self.port = port
        self.request_timeout = request_timeout
        self.wait_status_interval = wait_status_interval
        self.wait_status_timeout = wait_status_timeout
        self.config = Config(
            location=location, keep_alive=keep_alive,
            query_cache_ttl=query_cache_ttl, query_timeout=query_timeout,
            error_message=error_message)

    def run(self):
        HTTPRequestHandler.timeout = self.request_timeout
        server_address = (self.address, self.port)
        server = ThreadingHTTPServer(
            server_address, HTTPRequestHandler, bind_and_activate=False)
        server.config = self.config
        server.daemon_threads = self.daemon
        server.server_bind()

        while self.wait_status_timeout > 0:
            logging.info('waiting {}s or success status to start'.format(
                self.wait_status_timeout))
            time.sleep(self.wait_status_interval)
            self.wait_status_timeout -= self.wait_status_interval
            if Report.is_ok():
                break

        server.server_activate()
        logging.info('listening on {}:{}'.format(*server_address))
        server.serve_forever()


class MaintenanceThread(AbstractCheck):
    def check_status(self):
        Report.clean_query_cache()


class Status(object):
    OK = 0
    ERROR = 1

    def __init__(self, error=OK, message=''):
        self.error = error
        self.message = message
        self.timestamp = 0

    def __str__(self):
        return '{}(error={}, message={}, timestamp={})'.format(
            self.__class__.__name__, self.error,
            repr(self.message), self.timestamp)

    def is_expired(self, ttl):
        return time.time() - self.timestamp > ttl

    def update(self, error, message):
        self.error = error
        self.message = message
        self.timestamp = time.time()


class Report(object):
    default_message = {Status.OK: 'true', Status.ERROR: 'false'}
    check_cache = collections.defaultdict(Status)
    query_cache = collections.defaultdict(Status)
    query_cache_ttl = 60

    @classmethod
    def clean_query_cache(cls):
        logging.debug('query cache size: {}'.format(len(cls.query_cache)))
        for query in list(cls.query_cache):
            if cls.query_cache[query].is_expired(cls.query_cache_ttl):
                logging.debug('query cache expired: "{}"'.format(query))
                del cls.query_cache[query]

    @classmethod
    def check_status(cls, name):
        return cls.check_cache[name]

    @classmethod
    def query_status(cls, name):
        return cls.query_cache[name]

    @classmethod
    def is_ok(cls, query='', exclude=()):
        return cls.is_query_ok(query) and cls.is_check_ok(exclude)

    @classmethod
    def is_check_ok(cls, exclude):
        return not any(cls.check_cache[name].error
                       for name in cls.check_cache.viewkeys() - exclude)

    @classmethod
    def is_query_ok(cls, query):
        return not (query in cls.query_cache and cls.query_cache[query].error)

    @classmethod
    def message(cls, query='', exclude=()):
        status = Status.OK
        messages = collections.defaultdict(list)

        if query in cls.query_cache:
            if cls.query_cache[query].error:
                status = Status.ERROR

            if cls.query_cache[query].message:
                messages[cls.query_cache[query].error].append(
                    cls.query_cache[query].message)

        for name in cls.check_cache.viewkeys() - exclude:
            if cls.check_cache[name].error:
                status = Status.ERROR

            if cls.check_cache[name].message:
                messages[cls.check_cache[name].error].append(
                    cls.check_cache[name].message)

        if status in messages:
            return '; '.join(messages[status])
        else:
            return cls.default_message[status]


class SystemService(object):
    def __init__(self, threads):
        self.threads = threads
        self.interval = self.watchdog_interval()

    def is_alive(self):
        return all(thread.is_alive() for thread in self.threads)

    @staticmethod
    def watchdog_interval(default_usec=3000000):
        return int(os.environ.get('WATCHDOG_USEC', default_usec)) / 1000000 / 2

    def start(self):
        for thread in self.threads:
            logging.debug('starting {}'.format(thread))
            thread.start()

        systemd.daemon.notify('READY=1')

        while self.is_alive():
            systemd.daemon.notify('WATCHDOG=1\nSTATUS=Threads: {}'.format(
                threading.active_count()))
            time.sleep(self.interval)

        logging.debug('system service finished')


class RSCheck(object):
    @staticmethod
    def main():
        parser = argparse.ArgumentParser()
        parser.add_argument('config_file')
        with open(parser.parse_args().config_file) as config_file:
            config = Config(**yaml.load(config_file))

        logging.basicConfig(
            format=config.logging['format'],
            level=logging.getLevelName(config.logging['level']))
        logging.debug('config: {}'.format(config))

        threads = []
        for thread in config.threads:
            thread_config = config.threads[thread]
            thread_class = globals()[thread_config.pop('class')]
            threads.append(thread_class(name=thread, **thread_config))

        SystemService(threads).start()


if __name__ == '__main__':
    RSCheck.main()
